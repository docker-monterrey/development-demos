version: "2"

# La sección de 'volumes' nos permite definir 'volúmenes' en los cuales podremos persistir archivos
# - por ejemplo, los datos de Postgres/Redis - de manera que estén disponibles aún y cuando los
# contenedores del proyecto sean destruidos:
volumes:
  # El volúmen en el que se almacenarán los datos de Postgres:
  postgres-data:
    driver: local
  # El volúmen en el que se almacenarán paquetes de .NET instaladas después del build:
  comments-packages:
    driver: local

# La sección de 'services' nos permite definir el conjunto de servicios (contenedores) que
# componen nuestra aplicación:
services:
  # El Servicio de base de datos de Postgres:
  postgres:
    # La sección de 'image' nos permite definir qué imagen (software) queremos usar en nuestro
    # contenedor. En éste servicio usaremos la imagen oficial de Postgres:
    image: postgres:9.6.1

    # La sección de 'ports' nos permite enlazar puertos del Host hacia puertos de nuestros contenedores,
    # permitiendo acceder a los mismos desde 'localhost':
    ports:
      # Enlazaremos el puerto 5432 de nuestro Host al mismo puerto de nuestro contenedor de Postgres,
      # permitiendonos acceder a él con nuestros IDE's favoritos en 'localhost':
      - 5432:5432

    # La sección de 'volumes' nos permite montar directorios y archivos de nuestro Host dentro de
    # nuestros containers - especialmente código -, así como también volúmenes definidos en la
    # sección de 'volumes', e incluso volúmenes definidos por algún otro contenedor:
    volumes:
      # Montamos el directorio 'db/dumps' dentro de nuestro contenedor de Postgres, para almacenar
      # ahí los respaldos que saquemos de las bases de datos, y poderlas restaurar posteriormente:
      - ./db/dumps:/db/dumps

      # Montaremos los scripts de respaldo y restauración de base de datos de alguno de los
      # sub-proyectos (todos tienen el mismo contenido):
      - ./surveys/bin/dumpdb:/bin/dumpdb:ro
      - ./surveys/bin/restoredb:/bin/restoredb:ro

      # Montamos el volúmen definido en la sección de 'volumes' en el directorio donde nuestro
      # contenedor de Postgres almacena los datos:
      - postgres-data:/var/lib/postgresql/data

    # La sección de 'environment' nos permite definir variables de entorno para éste contenedor:
    environment:
      # Ésta variable es usada por el entrypoint de Postgres para configurar el password del usuario
      # 'postgres':
      POSTGRES_PASSWORD: 3x4mpl3

  web: &base
    # La sección 'extends' nos permite importar la definición de un servicio definido en otro archivo:
    extends:
      file: docker-compose-app-base.yml
      service: app

    command: dotnet run
    ports:
      - 4003:5000

    # La sección 'links' nos permite enlazar éste contenedor con otros contenedores del proyecto:
    links:
      - postgres:db  # Permite ver el servicio de Postgres desde éste contenedor con el hostname 'db'
    environment:
      DATABASE_URL: postgres://postgres:3x4mpl3@db:5432/comments_development
      ASPNETCORE_URLS: http://0.0.0.0:5000
